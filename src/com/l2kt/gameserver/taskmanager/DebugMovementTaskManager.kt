package com.l2kt.gameserver.taskmanager

import kotlin.collections.Map.Entry
import java.util.concurrent.ConcurrentHashMap

import com.l2kt.Config
import com.l2kt.commons.concurrent.ThreadPool
import com.l2kt.gameserver.idfactory.IdFactory
import com.l2kt.gameserver.model.WorldObject
import com.l2kt.gameserver.model.actor.Playable
import com.l2kt.gameserver.model.item.instance.ItemInstance

/**
 * A task used to delete objects generated by the Config DEBUG_MOVEMENT.
 */
object DebugMovementTaskManager : Runnable {
    private val _items = ConcurrentHashMap<ItemInstance, Long>()

    init {
        ThreadPool.scheduleAtFixedRate(this, 1000, 1000)
    }

    override fun run() {
        val time = System.currentTimeMillis()

        for ((item, value) in _items) {
            if (time < value)
                continue

            item.decayMe()

            _items.remove(item)
        }
    }

    fun addItem(character: WorldObject, x: Int, y: Int, z: Int) {
        val itemId = if (character is Playable) 57 else 1831

        val item = ItemInstance(IdFactory.getInstance().nextId, itemId)
        item.count = 1
        item.spawnMe(x, y, z + 5)

        _items[item] = System.currentTimeMillis() + Config.DEBUG_MOVEMENT
    }
}